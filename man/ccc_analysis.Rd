% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ccc_diff.R, R/ccc_enrich.R
\name{ccc_diff}
\alias{ccc_diff}
\alias{ccc_enrich}
\title{Differential or Enriched Cell-Cell Communication Analysis}
\usage{
ccc_diff(
  expression_matrix,
  metadata,
  cell_id_col = "cell_id",
  cell_type_col = "cell_type",
  group_col = "group",
  covar_col = NULL,
  cdr = TRUE,
  id_col = "id",
  lmm_re = TRUE,
  logmm_re = TRUE,
  sender = NULL,
  receiver = NULL,
  lr = "omnipathr",
  multi_sub = "minimum",
  verbose = TRUE,
  min_cell = 10,
  min_pct = 0.01,
  large_n = 2,
  min_total_pct = 0,
  threshold = 0,
  sep_detection = TRUE,
  sep_prop = 0,
  sep_n = 0,
  sandwich = FALSE,
  control_logm = list(),
  control_lmm = lme4::lmerControl(),
  control_logmm = list(),
  chunk_size = 10
)

ccc_enrich(
  expression_matrix,
  metadata,
  cell_id_col = "cell_id",
  cell_type_col = "cell_type",
  covar_col = NULL,
  cdr = TRUE,
  id_col = "id",
  lmm_re = FALSE,
  logmm_re = FALSE,
  sender = NULL,
  receiver = NULL,
  lr = "omnipathr",
  multi_sub = "minimum",
  verbose = TRUE,
  min_cell = 10,
  min_pct = 0.01,
  large_n = 1,
  min_total_pct = 0,
  threshold = 0,
  sep_detection = TRUE,
  sep_sample_prop = 0,
  sep_sample_n = 0,
  sandwich = FALSE,
  control_logm = list(),
  control_lmm = lme4::lmerControl(),
  control_logmm = list(),
  chunk_size = 10
)
}
\arguments{
\item{expression_matrix}{a numeric matrix of normalized counts, with rows corresponding to genes and columns corresponding to cells. Both row names (gene symbols) and column names (cell identifiers) must be provided.}

\item{metadata}{a data frame containing cell-level metadata (e.g., cell type, group, id, covariates).}

\item{cell_id_col}{a character string specifying the name of the column in \code{metadata} that contains cell identifiers. These ID's should match the column names of \code{expression_matrix}. Defaults to \code{"cell_id"}.}

\item{cell_type_col}{a character string specifying the name of the column in \code{metadata} that contains cell type annotations. Defaults to \code{"cell_type"}.}

\item{group_col}{a character string specifying the name of the column in \code{metadata} that represents the variable to be tested. The values in this column should match the names specified in \code{contrast} of \code{\link[=ccc_test]{ccc_test()}}. Defaults to \code{group}.}

\item{covar_col}{a character string or a character vector specifying the column(s) in \code{metadata} that represent covariates to include in the model. Defaults to \code{NULL}, meaning no covariates are adjusted for.}

\item{cdr}{logical scalar. If \code{TRUE} (the default), calculate and adjust for cellular detection rates (CDR). The CDR of a cell is defined as the number of genes with expression level above \code{threshold} divided by the total number of genes.}

\item{id_col}{a character string specifying the name of the column in \code{metadata} that contains individual-level (sample-level) ID's. Used for random effect modeling. Must be provided if \code{lmm_re == TRUE} or \code{logmm_re == TRUE}; otherwise, this can be omitted. Defaults to \code{"id"}.}

\item{lmm_re}{logical scalar. Should a random effect be included in the linear component of the hurdle model? If \code{TRUE} (the default), fit a linear mixed-effects model with a random intercept based on \code{id_col} for each ligand/receptor gene; if \code{FALSE}, fit a linear model without random effects.}

\item{logmm_re}{logical scalar. Should a random effect be included in the logistic component of the hurdle model? If \code{TRUE} (the default), fit a logistic mixed-effects model with a random intercept based on \code{id_col} for each ligand/receptor gene; if \code{FALSE}, fit a logistic model without random effects.}

\item{sender}{a character string or a character vector specifying the cell types as sender (expressing ligands in cell-cell communication). Defaults to all cell types.}

\item{receiver}{a character string or a character vector specifying the cell types as receiver (expressing receptors in cell-cell communication). Defaults to all cell types.}

\item{lr}{specifies the ligand-receptor database to use. Can be \code{"omnipathr"} (the default), \code{"ramilowski"}, or a user-supplied data frame. If \code{"omnipathr"} or \code{"ramilowski"} is provided, the corresponding built-in dataset is used. If a data frame is provided, it must contain exactly two columns named \code{"ligand"} and \code{"receptor"}, with gene symbols as entries. For multi-subunit ligands/receptors, the gene symbols of all subunits must be joined by \verb{_}. (e.g., \code{"CLCF1_CRLF1"} for a ligand composed of CLCF1 and CRLF1)}

\item{multi_sub}{a character string specifying how to handle multi-subunit ligands/receptors.
\itemize{
\item \dQuote{\code{minimum}}: (the default) the expression level for each cell is defined as the minimum expression across all subunit genes.
\item \dQuote{\code{arithmetic_mean}}: the expression level for each cell is defined as the arithmetic mean expression across all subunit genes.
\item \dQuote{\code{geometric_mean}}: the expression level for each cell is defined as the geometric mean expression across all subunit genes.
\item \dQuote{\code{min_avg_gene}}: the subunit gene with the minimum average expression is selected.
\item \dQuote{\code{min_rate_gene}}: the subunit gene with the minimum expression rate is selected. The expression rate for a gene is calculated as the number of cells with expression level above \code{threshold} divided by the total number of cells.
}}

\item{verbose}{logical scalar. If \code{TRUE} (the default), display a progress bar. The default handler is "progress". This package uses the \pkg{progressr} framework for progress reporting, so users can customize the progress bar. See \code{\link[progressr:handlers]{progressr::handlers()}} for customizing progress bar behavior.}

\item{min_cell}{integer scalar. Exclude cell types with fewer than \code{min_cell} cells from the analysis. Defaults to 10.}

\item{min_pct}{numeric scalar. Only test ligand-receptor pairs that are expressed above \code{threshold} in a minimum fraction of \code{min_pct} cells for \code{large_n} individuals/samples in sender and receiver cell types respectively. Defaults to 0.01.}

\item{large_n}{integer scalar. Number of individuals/samples that are considered to be "large". Defaults to 2.}

\item{min_total_pct}{numeric scalar. Only test ligand-receptor pairs that are detected (expression level above \code{threshold}) in a minimum fraction of \code{min_total_pct} cells across all individuals/samples in sender and receiver cell types respectively. Defaults to 0.}

\item{threshold}{numeric scalar. A gene is considered expressed in a cell if its expression level is greater than \code{threshold}. Defaults to 0.}

\item{sep_detection}{logical scalar. If \code{TRUE} (the default), detect complete or quasi-complete separation in logistic models.}

\item{sep_prop}{numeric scalar. For each ligand/receptor gene, if it is expressed above/below \code{threshold} in all cells of target/background cell types of more than a \code{sep_prop} fraction of individuals/samples, this is considered complete or quasi-complete separation and the logistic model for that gene is skipped.}

\item{sep_n}{numeric scalar. For each ligand/receptor gene, if it is expressed above/below \code{threshold} in all cells of target/background cell types of more than \code{sep_n} individuals/samples, this is considered complete or quasi-complete separation and the logistic model for that gene is skipped.}

\item{sandwich}{logical scalar. If \code{TRUE}, sandwich standard errors are used in the calculations. Defaults to \code{FALSE}.}

\item{control_logm}{control parameters for optimization in \link[stats:glm]{stats::glm}.}

\item{control_lmm}{control parameters for optimization in \link[lme4:lmer]{lme4::lmer}.}

\item{control_logmm}{control parameters for optimization in \link[GLMMadaptive:mixed_model]{GLMMadaptive::mixed_model}.}

\item{chunk_size}{integer scalar. The number of communication events (each defined by a distinct combination of sender, receiver, ligand, and receptor) per chunk. Passed to the \code{future.chunk.size} argument of \code{\link[future.apply:future_lapply]{future.apply::future_lapply()}}. Defaults to 10. To enable parallelization, users should use the \pkg{future} package.}

\item{sep_sample_prop}{numeric scalar. For each ligand/receptor gene, if it is expressed above/below \code{threshold} in all cells of more than a \code{sep_sample_prop} fraction of individuals/samples, this is considered complete or quasi-complete separation and the logistic model for that gene is skipped.}

\item{sep_sample_n}{numeric scalar. For each ligand/receptor gene, if it is expressed above/below \code{threshold} in all cells of more than \code{sep_sample_n} individuals/samples, this is considered complete or quasi-complete separation and the logistic model for that gene is skipped.}
}
\value{
A list with the following elements:
\itemize{
\item{\code{func}}: the name of the \verb{ccc_*} function being called.
\item{\code{summary}}: a data frame of descriptive statistics for ligand/receptor gene expressions in sender/receiver cell types.
\item{\code{estimate}}: a data frame of estimates for the variable of interest specified by \code{group_col} (\code{ccc_diff}), or the target and background cell types (\code{ccc_enrich}) in the linear and logistic components of the hurdle model.
\item(\code{errors}): a list of communication events for which model fitting failed, along with corresponding error messages.
\item{\code{warnings}}: a list of communication events for which warnings are issued during model fitting, along with corresponding warning messages.
\item{\code{messages}}: a list of communication events for which diagnostic messages are generated during model fitting, along with corresponding messages.
}
See \code{\link[=ccc_test]{ccc_test()}} for how to generate the test results.
}
\description{
For each communication event (defined by a distinct combination of a sender, a receiver, a ligand, and a receptor), fit a gene-wise hurdle model (the linear component for expression levels > \code{threshold}; the logistic component for expression levels > \code{threshold} vs. expression levels <= \code{threshold}) to ligand and receptor gene expression data respectively.
}
\details{
\code{ccc_diff} computes the mean and covariance estimates for the variable of interest, which is specified by \code{group_col}, in both components of the hurdle model.
\code{ccc_enrich} computes the mean and covariance estimates for the target cell types, which are specified by \code{sender} and \code{receiver}, and the background cell types (all non-target cell types), in both components of the hurdle model.

Results tables of effects sizes and p-values can be generated using \link{ccc_test}.

\code{ccc_diff} performs differential cell-cell communication analysis. For each communication event, a hurdle model is fitted to ligand expression data in sender and another hurdle model is fitted to receptor expression data in receiver.
\code{ccc_enrich} performs enriched cell-cell communication analysis. For each communication event, a hurdle model is fitted to ligand expression data in all cells and another hurdle model is fitted to receptor expression data in all cells.
The hurdle model doesn't have an fixed intercept. In \code{ccc_diff}, the variable of interest (specified by \code{group_col}) is modeled using the cell means coding scheme, where each level of the variable is represented by a separate dummy variable.
In \code{ccc_enrich}, the model includes a binary variable to distinguish between target and background cell types, and this binary variable is also modeled using the cell means coding scheme. In ligand expression data, the target cell type is specified by \code{sender}, and the background cell types are all other cell types. In receptor expression data, the target cell type is specified by \code{receiver}, and the background cell types are all other cell types.
Besides, the other covariates are centered to have a mean of 0. This allows the mean ligand/receptor expression in each level of \code{group_col} (\code{ccc_diff}) or in target/background cell types (\code{ccc_enrich}) to be estimated directly.

Users can either specify the relevant column names of \code{metadata} using the arguments \code{cell_id_col}, \code{cell_type_col}, \code{group_col}, \code{covar_col} (can be omitted if no covariates are to be adjusted for), and \code{id_col}, or rename the relevant columns in \code{metadata} to match the default names.
To adjust for CDR, simply set \code{cdr = TRUE} (This is also the default setting); do not calculate and add CDR manually to \code{metadata}.
The \code{lmm_re} and \code{logmm_re} arguments specify whether to include random intercepts in the linear and logistic components of the hurdle model respectively.
The \code{lr} argument specifies the ligand-receptor database to use. The default is \code{"omnipathr"}, which considers ligand-receptor interactions with multiple subunits. \code{"ramilowski"} is another database, which only contains binary ligand-receptor interactions. Users can also provide their own data frame with ligand-receptor pairs. For details, see the \code{lr} argument.
Although \code{sender} and \code{receiver} can be specified as vectors, each communication event only involves one sender and one receiver (and one ligand expressed by the sender and one receiver expressed by the receiver). Each communication event is analyzed separately.

For each ligand/receptor gene, if the model fitting fails or produces warnings or diagnostic messages, this function will return the relevant information in the output. If the estimates of some communication events are missing in the output, users can check \code{errors} element of the output to find the corresponding error messages.

Parallelization is supported via \pkg{future}. Progress bars are customized using \pkg{progressr}.
}
\examples{
\dontrun{
## Run with example data
data(data.sim, package = "ccc")
data(lr.sim, package = "ccc")
expression_matrix <- log_normalize(data.sim$counts)
metadata <- data.sim$metadata

## Differential ccc analysis
# Run sequentially
a <- ccc_diff(
  expression_matrix = expression_matrix, metadata = metadata,
  id_col = "sample", lr = lr.sim, sender = "CT1", receiver = c("CT2", "CT3"),
  lmm_re = TRUE, logmm_re = TRUE
)
a.result <- ccc_test(a, contrast = c(grp2 = 1, grp1 = -1))
head(a.result)

# Run in parallel
library(future)
oplan <- plan(multisession, workers = 2L)
a <- ccc_diff(
  expression_matrix = expression_matrix, metadata = metadata,
  id_col = "sample", lr = lr.sim, sender = "CT1", receiver = c("CT2", "CT3"),
  lmm_re = TRUE, logmm_re = TRUE
)
a.result <- ccc_test(a, contrast = c(grp2 = 1, grp1 = -1))
plan(oplan)
head(a.result)

## Enriched ccc analysis
# Run sequentially
b <- ccc_enrich(
  expression_matrix = expression_matrix, metadata = metadata,
  id_col = "sample", lr = lr.sim, sender = "CT1", receiver = c("CT2", "CT3"),
  lmm_re = TRUE, logmm_re = TRUE
)

# Run in parallel
library(future)
oplan <- plan(multisession, workers = 2L)
b <- ccc_enrich(
  expression_matrix = expression_matrix, metadata = metadata,
  id_col = "sample", lr = lr.sim, sender = "CT1", receiver = c("CT2", "CT3"),
  lmm_re = TRUE, logmm_re = TRUE
 )
b.result <- ccc_test(b)
plan(oplan)
head(b.result)
}

}
